Decide on a GoJS diagram model and layout method	"Evaluate and then finally decide which GoJS diagram model layouting method should be used.



How much nesting? inner and outer boxes, one or more or all levels?



verify: can the wrapping column be bound, and independently so for each outer box and the grid of its inner boxes?



design a grid with padding/gutter so that the _inner_ boxes are aligned vertically."		Task	iteraplan PO	10/Mar/16 9:23 AM	23/Mar/16 2:41 PM														"11/Mar/16 3:53 PM;wfr;Assumption: nesting as in previous NCD on IC, that is 3 levels of outer boxes and 3 levels of inner boxes.



"	"14/Mar/16 3:26 PM;wfr;Idea



A NCD has up to 6 levels of boxes, 3 levels for the outer elements and 3 levels for the inner elements.



Boxes can contain boxes, or not.



In the most simple case, that is without nesting, the diagram has boxes for outer elements, and each of these can contain boxes for inner elements, which in turn are always empty.

 







"	"16/Mar/16 1:50 PM;wfr;Layout of an empty box:

* rectangle

* height fixed (independent of text legth

* width depending on nesting level, but independent of text length

* 1 to 3 lines of text, text wrapped on blanks or, if there are no natural wrapping points in the text, split after n characters.

* icon in the upper left corner, indicating the building block type

* text lines should be left allgned, _no_ indentation of first line

* background color indicating the architectural domain (business, is, ...) and the nesting depth

* no border frame "	"16/Mar/16 2:00 PM;wfr;Layoutout of a non-empty box with children:

* as an empty box BUT

* 1 line of text, not 3

* no text wrapping

* one or more rows of children boxes

* number of rows (or columns) depending on number of boxes: rows = square root of boxes, rounded up

* boxes are packed left-aligned into rows (not in a fixed grid with vertical alignement)

* IDEA: wrap boxes not by the criterion ""wrapping column"" but by ""wrapping width"". Higher density. But how to compute this wrapping width? 2-step algo?

* children boxes are sorted logically, not reordered for layout.

* default sorting is lexicographically by name.

* other sorting and ordering maybe later.

* in a box (for an outer element) with children boxes for both outer and inner elements, all outer elements come first, then all inner elements. No mixed sequence of outer and inner elements."	"16/Mar/16 2:12 PM;wfr;Boxes should have a landscape A format aspect ratio, that is  h x b = 1 x 1.4



Empty boxes have this form factor by design.



Container boxes of the lowest level have this form factor (approx.)  because they have a square grid of children boxes. 

The last line of children may not be full.



Container boxes of the second lowest level have children of various sizes (empty boxes, 1x1-containers, 2x2-containers, 3x3-containers, and so on.

The empty box as a child at this level must be as wide as the 1x1 container."	"16/Mar/16 2:23 PM;wfr;Note on implementation with GoJS



For a sample of groups of groups of boxes and the model structure for that, see http://gojs.net/latest/samples/regrouping.html and ignore the dynamic regrouping feature.



For GoJS, the model data needs fields for key (id), ""isGroup""  and its containing group (""group"": id).

Note that groups can have mixed content (groups and terminal nodes).



All semantic properties of the diagram boxes (color, icon) can be part of the model data and bound to the template.

BUT the wrapping criterion of the grid layout cannot be computed in the model data and bound to diagram templates.

Instead, one can extend the GridLayout so that the wrapping column is computed from the list of children that are layed out at a given application of the layout.

See SFe's code fragment.



As all container groups have the same structure, there are only two node templates: container box and empty box.

The container box can handle all cases (outermost or lower levels, box for outer type element or inner type element. "	"16/Mar/16 2:26 PM;wfr;Make the widths for padding and insets so that they are multiples of a common design grid width.



For example: 

The outer box as a padding of 20 px and a gutter of 10 px. 

The inner box has padding of 20 px and a content (text line) width of 150 px.

Result: all boxes fall in a horizontal grid position on 10 px intervals.



Consider "	"17/Mar/16 1:48 PM;wfr;Note: this ticket is only about decisions and solution design.



The commited code is a PoC how to extend the GoJS GridLayout."																																															
