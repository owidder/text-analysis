Merge event listeners/handling for elastic update and plugins	"Currently, we have two custom hibernate event listeners for model changes:

* {{ElasticUpdateEventListener}}: has to collect events that signify relevant changes for the elastic data model, and trigger an update of the elastic data model for the relevant changed entities.

* {{ReactionsEventListener}}: has to collect events that signify relevant changes for the plugin API, calculate the exact changes that happened and trigger notification of the plugins.



There are three reasons a merge of the two listeners could be done and is advantageous:

# The above mentioned ""relevant changes"" for elastic data model and plugin API are almost identical. The only difference being, that metamodel only changes are inconsequential for plugins.

# The current ElasticUpdateEventListener relies on an explicit update event notification for a changed entity. Currently this is given due to changed entities always being saveOrUpdated explicitly. However, this may change, and the consequences of such a change may be hard to notice during normal testing, resulting in the elastic update missing relevant changes.

_Example:_ If the only change to a building block is the assigned value in a user defined attribute, then the building block entity itself doesn't change. If no explicit saveOrUpdate for the entity is called, the event listener will only receive delete and insert events for attribute value assignments, and in its current state ignore that change.

Using the change calculation done for plugins in ReactionsEventListener would very likely solve this.

# After merging the event listeners, there would be only one place tasked with listening to hibernate events related to landscape data changes. This increases maintainability.



The proposed improvement is for both event listeners to be merged, so that the resulting listener collects and calculates model changes like the current ReactionsEventListener, and itself notifies an arbitrary number of ""ModelChangeListeners"" designed by us, with one implementation handling the elastic update (using the existing TransactionJournal and related code), and another implementation handling the notification of plugins."		Improvement	iteraplan Thunderduck	26/Aug/16 1:28 PM						elastic	eventlistener	plugin	update						20/Jul/17 2:11 PM;aan;After talking to [~sfe]: The first thing happened already. What remains to do is to let the BeforeCompletionModelChangeAction and AfterCompletionModelChangeAction update Elastic. This probably needs writing a lot of new code, but it could solve the problem of saving all related BM for an IS, that is also described in ticket IPTT-567.																																																						
