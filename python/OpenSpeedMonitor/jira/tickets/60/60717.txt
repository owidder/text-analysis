Extension point for subscription/event based actions	"Provide an API and extension point for subscription of events and event based actions that can change the model.



Provide and/or define an API so that the plugin can

* subscribe to CRUD events of elements of a given building block type

* react to the subscribed events

* access the event details

* read affected elements and all other elements of the model

* operate on these elements (CRUD)

* write changes back to the persistent model (aka. ""merge"")

* subscribe to and react to time tick events  

* display messages to the user

* log messages for operation



Packaging and deployment:

* One or more plugin in implementations can be packaged into a JAR and put into the lib folder of the web application, just like any other library.

* iteraplan looks for a plugin descriptor file with a defined name (pattern).

* The descriptor file contains the name of the main plugin class to instantiate and call.

* More 2010 than descriptor file: Java annotation. iteraplan scans the loaded classes for that annotation.



Notes

* only elastic, not on Hibernate entities

* bulk changes need a bulk merge

* event filtering finer than building block type is in the plugin, not in the registration

* no schema/metamodel changes, even no new enumeration values

* no veto to changes, all actions run after a commited user edit

* bulk changes by ""mass update"" and import also trigger actions with a ""bulk"" event, not a long list of separate calls to the plugin.

* chaining and recursion of plugins is the responsibility of the plugins author, changes by a plugin can trigger the same plugin or another. The plugin itself must filter appropriately to break the cycle.

* There is exactly one instance of a plugin per installation, and this instance has its private state, but no means to persist this state over an instance restart.

* A plugin can pool changes to the model into a bulk merge. The decision to merge can be taken on regular or on time tick events.



Included here:

* a handful of plugins for tests, even a few ill-behaved

* a handful of simple plugins for demonstration, showing different typical and intended uses, but without really useful logic.



Note that we need to speed up the merge of changes of a single element drastically.



----



Just for fun - features to make the concept more interesting:

* the plugin can subscribe to elements matching a iteraQL expression

* the plugin can opt for accumulated events by specifying iteraQL expressions and a hysteresis time. 

* the plugin can specify a merge decision strategy for the extension framework: merge the model after each call, or wait for a quiet period of n seconds, or even better: distinguish by sets of logically coherent sets of elements, again specified by iteraQL

* the plugin has a life cycle with init, destroy, pre shutdown, sleep, wake up, ...

* the plugin can specify before and after which other plugins it wants to run.

* tbc"		New Feature	iteraplan Thunderduck	19/Oct/15 11:04 AM	14/Sep/16 1:11 PM					outdated									14/Sep/16 1:11 PM;ach;depricated summary ticket																																																						
