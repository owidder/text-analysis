Remove system property setting for TransformerFactoryImpl in application context	"Currently in iteraplan in applicationContext.xml we have following setting:

{noformat}

    <!-- Set custom System properties: -->

    <bean class=""org.springframework.beans.factory.config.MethodInvokingFactoryBean"">

      <property name=""targetObject"" value=""#{@systemProperties}"" />

      <property name=""targetMethod"" value=""putAll"" />

      <property name=""arguments"">

          <!-- The new Properties -->

          <util:properties>

              <!-- Set Xalan as default implementation for XSLT Transformations

                to avoid the ServliceLoader's usage of Saxon TransformerFactory implementation by default.

                See ""META-INF/services/..."" of Saxon jar and ServiceLoader API Docs for details:

                https://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html

              -->

              <prop key=""javax.xml.transform.TransformerFactory"">org.apache.xalan.processor.TransformerFactoryImpl</prop>

          </util:properties>

      </property>

    </bean>

{noformat}



This sets a system property to use the xalan TransformerFactoryImpl as default, when a TransformerFactory is needed.



Unfortunately, the system property seems to be valid Tomcat-wide, so other applications on the same tomcat may not work anymore, if they require a TransformerFactory, but do not have the xalan dependency in their classpath.



Please remove the system property setting and change the conflict issues between xalan and saxon TransformerFactory implementations in a different manner."		Bug	iteraplan PO	20/Oct/15 1:17 PM	02/Nov/15 11:15 AM														"29/Oct/15 4:06 PM;wfr;Notable: 

https://docs.oracle.com/javase/7/docs/api/javax/xml/transform/TransformerFactory.html



Obtain a new instance of a TransformerFactory. This static method creates a new factory instance This method uses the following ordered lookup procedure to determine the TransformerFactory implementation class to load:



* Use the javax.xml.transform.TransformerFactory system property.

* Use the properties file ""lib/jaxp.properties"" in the JRE directory. This configuration file is in standard java.util.Properties format and contains the fully qualified name of the implementation class with the key being the system property defined above. The jaxp.properties file is read only once by the JAXP implementation and it's values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any property in jaxp.properties after it has been read for the first time.

* Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API will look for a classname in the file META-INF/services/javax.xml.transform.TransformerFactory in jars available to the runtime.

* Platform default TransformerFactory instance.

"																																																						
