Update auf dem Detail-Daten-Branch durchführen	"Das Update soll soweit gebracht werden, dass die Anwendung ggf. mit funktionalen Einschränkungen startet und die Kernfunktionalität wieder da ist.



In diesem Ticket sollen die Punkte, an denen die Funktionalität noch eingeschränkt ist und Aufwand erforderlich ist um diese wieder zu ermöglichen gesammelt werden."		Task	OpenSpeedMonitor	07/Apr/16 10:50 AM	08/Jun/16 5:49 PM														"07/Apr/16 11:01 AM;nku;Offene Todos:



|| Todo || Beschreibung Todo || Geschätzter Aufwand || In Progress by || Kurze Beschreibung der Lösung || 

| Versions-Update Bamboo | Das Script zum Aktualisieren der Versionsnummer muss angepasst werden, da es keine application.properties mehr gibt. Die Versionsnummer steht jetzt in der build.gradle. | done | bka | Das Skript wurde umgeschrieben |

|Logback konfigurieren|Grails 3 arbeitet nicht mehr mit Log4J sondern mit Logback. Das komplette Logging wurde in der application.groovy auskommentiert. | done | msk | Logginfunktionalität 1:1 in Logback nachgebaut. Die Einzige Einschränkung ist, dass der AppName (OpenSpeedMonitor) jetzt hardcoded ist. Vielleicht fällt dazu ja noch wem was ein|

|Validateable| grails.validation.Validateable ist in Grails 3 keine Annotation mehr sondern ein Trait. Wenn gecheckt wird, ob z.B. ein Command valide ist kommt es nun zum Fehler. Theoretisch sollte es sogar möglich sein auf das Validateable Trait für Commands und Domains komplett zu verzichten (https://grails.github.io/grails-doc/latest/guide/validation.html)| done | bka | Die Commands müssen das Validateable-trait erhalten, da sie nicht in der zugehörigen Controller-Klasse liegen. Sie haben das trait erhalten. |

| Private Konfiguration| Konfigurationen z.B. zur DataSource werden in ~/.grails/ Ordner abgelegt und sollen vom OSM ausgelesen werden. Diese Funktionalität ist momentan nicht gegeben, die DataSource muss also direkt in der application.groovy definiert werden. Siehe hierfür auch: http://mrhaki.blogspot.de/2015/09/grails-goodness-using-external.html| done | bka | In Grails 3 ist dies nicht ohne weiteres möglich. Es wird ein [Plugin](https://github.com/sbglasius/external-config) geben, dass dies ermöglicht. Von dort habe ich mir ein wenig Code geliehen (mit Nachfrage!), und in die Application.groovy eingesetzt. |

|Login|Es sollte möglich sein, sich z.B. als root auf dem OSM einzuloggen. Momentan kommt trotz korrekter Credentials und bestehender Verbindung zur Datenbank die Fehlermeldung das Benutzer und Passwort unbekannt sind. Das Problem kann evtl. mit dem Update des spring-security-core Plugins zu tun haben. | done | bka | Beim Versionswechsel werden andere Formularfelder von Spring-Security erwartet. Bislang hießen sie ""j_*"", jetzt heißen einige nur noch ""*"". Außerdem werden assets im Browser nicht mehr unter ""domain.de/static/**"" geladen, sondern unter ""domain.de/assets/**"". Daher mussten die Gast-Rechte angepasst werden. |

|LESS-assetpipeline| Zum Kompilieren des UI benötigen wir die less-assetpipeline. Momentan sind die Assets zwar vorhanden (also auch von Spring-Security freigegeben) aber werden nicht in eine UI kompiliert. Das kann entweder an (fehlender) Konfiguration oder falscher Einbindung des Plugins liegen. Momentan orientiert sich das Dependency-Setup in der application.groovy an einer Antwort aus StackOverflow (http://stackoverflow.com/questions/34133090/less-css-is-not-compiled-in-grails-3-when-deploying-as-war).| done | bwo&bka |

|Konsole aufrufen| Eigentlich sollte eine Konsole zum direkten debuggen in der laufenden Anwendung unter localhost:8080/console verfügbar sein. Die URL wird aber offensichtlich nicht richtig gemappt. Es kommt ein 404 Fehlermeldung. Evtl. liegt das URLmapping.groovy auch nur an der falschen Stelle. | done | bka | Das Konsolen-Plugin war falsch in der build.gradle integriert |

|Taggable Plugin| Das Taggable Plugin wurde vorübergehend deaktiviert. Es muss geprüft werden, ob wir es auch unter Grails 3 nutzen können | | msk | Taggable Git-Repository gecloned (https://github.com/gpc/taggable) und manuell von 3 auf 3.1.4 upgegraded. Dieses Version haben wir dann in ein eigenes Git-Repository eingepflegt (git@github.com:iteratec-hh/taggable.git)|

|Bootstrap Grails Fix| In der Bootstrap wird ein Grails Fix für JSON Objekte ausgeführt. Dieser scheint nicht mehr zu funktionieren. Es muss überprüft werden, ob dieser überhaupt noch benötigt wird. | done | bka | Mit Nils besprochen: Es gibt das Grails-Jira und das Ticket nicht mehr. Der Bugfix wurde entfernt. Sollte er wieder nötig sein, kann er wieder implementiert werden.

|Tests fixen| mockForConstraintsTests ist laut folgendem Link veraltet und sollt entfernt werden: https://github.com/grails/grails-core/issues/9435#issuecomment-160181155. Außerdem gibt es mockFor nicht mehr und stattdessen sollte Mock von Spock genutzt werden. | s. Kommentar | |"	"07/Apr/16 11:19 AM;nku;Bearbeitet momentan von Marko und Benjamin

"	08/Apr/16 3:00 PM;bwo;Die Asset Pipeline funktioniert bereits. Die fehlenden Assets resultierten aus veralteten Plugins. Wir sollten beachten dass auch Plugins welche nicht mit Grails 3 kompatibel sind geladen werden, sie werden nur nicht genutzt. Deswegen haben wir das twitter bootstrap Plugin ausgetauscht. Das neue Plugin lädt nun die Ressourcen und speichert sie im Asset-Ordner. Wir haben außerdem JQuery und JQuery-UI aus den Plugins entfernt und manuell in dem Asset-Ordner gespeichert.	"08/Apr/16 3:30 PM;nku;Hier dokumentieren wir welche Plugins wir geprüft haben auf Kompatibilität mit Grails Version 3.1



|| Name Plugin || Wer? || Unterstützt Version 3.1 laut Doku || unterstützt nicht laut Doku || Keine Angabe zur Kompatibilität in der Doku || Funktioniert im OSM mit Grails 3.1 || Kommentar ||

| org.grails.plugins:cache | bka | yes | | | ? | |

| org.grails.plugins:hibernate4 | bka | yes | | | yes | Es gibt bereits das Plugin 'hibernate5'. Evtl evaluieren, was ein Wechsel bringt? |

| org.grails.plugins:joda-time:1.5 | bka | yes | | | ? | Es gibt bereits 2.0. Diese verwenden wir |

| org.grails.plugins:scaffolding:2.1.0 | msk | yes |  |  | ? | Es gibt bereits 3.2.1, diese verwenden wir. |

| org.grails.plugins:spring-security-core:3.0.4 | bka | yes | | | yes | |

| org.grails.plugins:rest:0.8 | bka | yes | | | Nicht mehr erforderlich (siehe folgende Zeile) | Wurde seit Oktober'13 nicht mehr gepflegt. |

| org.grails.plugins:http-builder-helper:1.0.0|msk| | | | ? | ersetzt rest:0.8 |

| org.grails.plugins:taggable:1.1.0 | bka | yes | | | Nicht mehr erforderlich (siehe folgende Zeile) | Es gibt bereits 1.1.1 |

| org.grails.plugins:taggable:2.0.1 | msk | | | | ? | selbst kompiliert, weil keine kompatible Version verfügbar |

| org.grails.plugins:cookie:2.0.4 | bka | yes | | | ? | |

| org.grails.plugins:asset-pipeline | bka | yes | | | yes | |

| org.grails.plugins:database-migration:1.4.0 | bka | yes | | | Nicht mehr erforderlich (siehe Folgezeile) | Es gibt bereits 1.4.1 und 2.x https://bintray.com/grails/plugins/database-migration/view |

| org.grails.plugins:database-migration:2.0.0.RC4 | msk | | | | nein | musste upgegraded werden siehe [https://iteraweb.iteratec.de/jira/browse/IT-1037] [https://iteraweb.iteratec.de/jira/browse/IT-1036]|

| org.grails.plugins:quartz:1.0.1 | bka | yes | | | ? | musste auf Version 2.0.8 upgedated werden, weil die alte Version nicht mehr Verfügbar ist |

| com.bertramlabs.plugins:less-asset-pipeline:2.7.4 | bka | yes | | | yes | |

| org.grails.plugins:code-coverage:2.0.3-3 | bka | no | | | ? | |

| org.grails.plugins:code-coverage:1.2.4 | msk |  | | | ? | seltsamerweise für grails 3 ne niedrigere Version als für grails 2.5 |

| org.grails.plugins:karma-test-runner:0.2.4 | bka | no | | | ? | |

"	"11/Apr/16 6:10 PM;bka;Die Tests lassen sich nicht ohne weiteres fixen. Es gibt ein Problem beim Mocking:

Bislang haben wir Services mit der Methode _mockFor_ gemockt, die von Grails mitgeliefert wird. In Grails 3.x gibt es diese Methode nicht mehr. (s. [https://github.com/grails/grails-core/commit/1a98c118bcb0705ce9f6215ce0961eaf4907881f])

Ich habe nichts in den Grails-Guides gefunden, wie man nun in Grails 3 mocken soll, allerdings wird häufig der Mocking-Mechanismus von Spock erwähnt (bspw. [https://dzone.com/articles/spocklight-change-return-value]). Um den zu nutzen müsste man allerdings das komplette Mocking umschreiben. Außerdem sagt Spock, dass man nur direkt in den Tests mocken soll, man kann also das Mocking nicht in eine Klasse refaktorieren!



Auf [Stackoverflow|http://stackoverflow.com/questions/33905437/grails-3-unit-testing-how-do-you-do-mockfor-createmock-and-demands-in-grails] gibt es einen User, der einen Umweg gefunden hat. (Er hat es als Update direkt in die Frage geschrieben)



Man sollte hier nachdenken, wie man das Mocking nun weitermachen möchte."	27/Apr/16 3:19 PM;nku;Bitte in diesem Ticket die Tabelle mit den Plugins ein mal durchgehen und checken, ob alle wo noch ein ? steht imm OSM funktionieren.	08/Jun/16 5:49 PM;nku;Dieses Sammel-Ticket schließe ich mal. Wenn noch was fehlschlägt wird uns das schon auffallen...																																																
