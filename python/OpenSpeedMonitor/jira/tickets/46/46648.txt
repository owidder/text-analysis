Partial Export with filter predicates using enumeration literals cannot be re-imported	"_Reproduce (with sample data):_
# Navigate to iteraplan -> Mass Data -> Import/Export
# Check ""partial"" checkbox
# Enter predicate: @complexity=""high""
# Export
# Import again

_Expected:_ Import with no changes

_Actual:_ Technical error page, cause:
{noformat}
de.iteratec.iteraplan.elasticmi.exception.ElasticMiException: The enumeration type de.iteratec.iteraplan.model.attribute.EnumAT.Complexity does not have a literal identifiable through high{REnumerationLiteralExpression}
{noformat}

_Why?_
The serialization of the filter uses the toString method of the used PojoREnumerationLiteral which includes the suffix {{\{REnumerationLiteralExpression\}}}. When importing, the compilation of this filter fails as there is no literal {{high\{REnumerationLiteralExpression\}}} in the enumeration {{Complexity}}. The correct literal would simply be {{high}}."		Bug	iteraplan PO	14/May/14 8:52 AM	18/May/14 11:12 AM					export	partial	serialization							"14/May/14 10:52 AM;sfe;Proposal:
* {{ValueExpression}} implements {{IteraQlSerializable}} and its serialize method is used for serialization purposes. For example in serialization of {{FilterPredicates}}, but also other similar uses.
* Replace the current factory method {{ValueExpression#create(Object)}} with several factory methods for the possible data types, i.e. {{Boolean}}, {{Color}}, {{String}} etc. and {{REnumerationLiteralExpression}}.
* The factory method for {{REnumerationLiteralExpressions}} returns a subclass of {{ValueExpression}} which uses the literal's persistent name instead of the toString method for serialization.

extended:
* Instead of a factory method for {{REnumerationLiteralExpressions}} introduce one for {{IteraQlSerializable}} and make {{REnumerationLiteralExpressions}} also implement {{IteraQlSerializable}}."	"14/May/14 2:02 PM;sfe;_Decision:_
The thorough and clean approach described above needs major changes all throughout the project to adjust the proper construction of ValueExpressions. There'd be issues with construction of ValueExpressions from classes using generics etc.
Thus, the following, easier to implement approach will be used:
* First step the same: {{ValueExpression}} still implements {{IteraWlSerializable}} and its {{serialize}} method is used for serialization purposes.
* {{ValueExpression}}'s already existing methods {{isEnumerationLiteral}} and {{asEnumerationLiteral}} are used to adjust the serialization as necessary"																																																					
