Missing unique constraint validation when editing ISR / TCR	"It is possible to create a database inconsistency like this:

* Create a BusinessUnit (or BusinessProcces, or Product)
* Create a InformationSystem
** In this IS, add a business mapping to the created BU
* Click on IS ""New Release""
** Add a release number
** Add a busniess mapping to the same BU like above.
** Save the new release
* Edit the created release, delete the release number and save it.
(i) No validation prevents from doing this, which means that we will have two ISR with equals name and version!

When you try to rename the connected BusinessUnit, then a unique constraint violation will come into effect, show a message and prevent the update.

The same procedure might be possible in TC-TCR (without the error in BM, of course).

This should be fixed in the GUI and/or in the database:
GUI: Validation on save.
DB: Unique constraint in table ""ISR"" on columns ""ID_INS, VERSION""

The inconsistent state can be checked with this query:
{code}
select ins.ID_BB, ins.NAME, isr.ID_BB, isr.VERSION, isr.DESCRIPTION from ins
	inner join isr
	on ins.ID_BB = isr.ID_INS
	where ins.NAME in (
		select ins.name from ins
			inner join isr
			on ins.ID_BB = isr.ID_INS
			group by ins.name, isr.VERSION
			having count(ins.NAME)>1 and count(isr.VERSION)>1
	);
{code}

A workaround for this issue would be to
* assign a version number to at least one of the concerned ISR
* remove the BM from at least one of the concerned ISR"		Bug	iteraplan PO	05/May/14 5:16 PM	05/Jun/14 6:27 PM					database	informationsystem	technicalComponent							"06/May/14 4:12 PM;wfr;Discussion with [~fka]:

* We can safely expect users to report this problem in their installations, because the problem is obvious enough. We should have a solution ready for the support team, but we do not need to screen client installations preventively.
* Both fixes (UI validation and DB constraint) are OK and will be done in the scope of this ticket.
* The DB script will be enhanced in two aspects:
** If the script does not find problems, it should print an explicit and friendly and assuring message like ""Your data quality is awesome"", in more technical words.
** Add a ""repair variant"" of the script: If the ""repair"" variant of the script does find pairs (or groups) of duplicate ISRs, it should rename the ISRs in each group so that they have distinct names.  For example: if there are two ISRs without number ""Foo"" and ""Foo"", then they should be named ""Foo#1"" and ""Foo#2"". Look for more explicit ""technical"" Release names/numbers ""T1, T2, T3"", __1, __2, __3? Ask Michael what he would expect
* The has three steps:
** The admin runs the repair script.
** The admin passes the list from the repair script with the found and repaired duplicates to an enterprise architect.
** The ent. arch. corrects the release names/numbers for each ISR.
* The analysis-only/no-repair. variant of the script, without repair, should still be available for timid admins.
* The repair will be integrated in the DB migration procedure of iteraplan 3.4.  Follow up ticket.
"	"03/Jun/14 1:58 PM;sfe;After discussion with [~wfr]:
The analysis-only script will not report a special message when no problems are found. Without this requirement the script is a lot simpler and only one variant for all our supported database systems is necessary.
Documentation that ""no result"" means ""the data is valid"" should be enough."	"03/Jun/14 2:01 PM;sfe;After discussion with [~mre]:
Using version suffixes of following format: 'duplicate version' -> 'duplicate version(X)' where X is 1, 2, 3 etc."	"05/Jun/14 6:27 PM;gph;Code review ok.
Fix and anaylsis scripts work. Tested with MySQL.
Bugfix (GUI Validation) works.
"																																																			
