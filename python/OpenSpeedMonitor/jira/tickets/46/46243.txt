Import errors don't indicate where error occurs	"All errors logged should indicate the line / cell at which the error occurred.

Some import errors report the error but not the location of the error. For example:

EnumerationLiteralExpression de.iteratec.iteraplan.model.attribute.EnumAT.Value type#None not found.
EnumerationLiteralExpression de.iteratec.iteraplan.model.attribute.EnumAT.Value type#Unknown not found.

This is a problem because in a spreadsheet with hundreds of rows and a hundred columns, somewhere there's a cell in a spreadsheet with ""None"" and ""Unknown"" in an enumerated attribute that doesn't allow that. There's no way to find them as distinct from the many other valid cells containing ""None"" or ""Unknown"" which are for attributes that do allow those values.

This makes it very difficult to locate and correct these import errors."		Bug	iteraplan PO	25/Oct/13 11:41 PM	08/Jul/14 12:32 PM														29/Apr/14 1:11 PM;fka;After overhaul of import&export: Is this still applicable?	"29/Apr/14 5:43 PM;bra;the messages are different now, however, they may be subject to further improvement.

if a literal could not be found, you get the following messaage: ""The value of property Data exchange for object expression with id 267 is not valid.""

This should include the type of the object and possibly its domain identity"	"29/Apr/14 11:01 PM;laird;I can't tell from the comments whether this is addressed, but it's important that we be able to associate error messages with specific input data (i.e. the exact tab, row and column in the spreadsheet) so that we can fix the source data. The error message you listed isn't specific at all.

Think of it this way - after the error message, does the reader have enough information to go into his source spreadsheet and fix the error?"	"02/May/14 10:18 AM;fka;Tracing back a (semantical) problem with the imported data to a certain cell in the excel import file automatically is arbitrarily complex and therefore expensive.
We will enhance the error messages so that they show which value for which object can not be set. The documentation will give hints how to trace back these errors to values in the excel file by hand."	"02/May/14 5:06 PM;laird;It's not ""arbitrarily complex"", it is a common, well understood debugging technique for data processing. Reporting errors in input data requires retaining the reference back to the input data (in this case tab, row and column) stored in-memory on the generated objects, instead of discarding that information as you do now. If the objects being processed know what cell they were generated from, then when logging an error you print the object's source info.

I can't speak to your code structure, but in my experience (having built servers with 100m+ users) it's adding attributes to the data objects generated by the parser for later processing, plus a few lines of code to record the tab/column/row in the parser (once), plus adding them to the logging (a few lines of code, once, in the logging handler). So it's only ""arbitrarily complex"" if you have an arbitrary number of parsers or loggers or data objects. Best practices is to have one parser, one logger, and a small number of parsed data objects. Complexity is comparable to web servers recording timestamps and IP addresses to a log - capture on input, pass through the processing, write whenever errors occur.

It should be less than a day's work, unless there's something very unusual going on. :-)"	"05/May/14 8:05 AM;wfr;I will add a step-by-step procedure and item-by-item explanation to the user's guide that leads to the spreadsheet cell in question as quickly as a direct ""sheet/row/column"" address.

In a slightly better world, I would be happy to add compiler-style source information to all our parsers (Excel compat. and current, JSON, XMI, XMI internal), the edit UI, and to the import logic of diff/merge and the various validators, maybe even to the diagram generation and reporting. The pattern is clear and proven, and has been discussed in the dev team, of course.

Thanks again for the excellent ideas.

We might be finished faster with the user's guide, though"	06/May/14 4:39 PM;laird;Thanks, this will be very helpful. If it's in the shared code I am happy to help.	"24/Jun/14 1:37 PM;wfr;General plan:
1) Find the all possible invalid edits
2) Find the message for the invvalid edits
3) write docs that lead from the message to the location of  the invallid edit and finally to the vallid edit.

Only for Excel, not for other external formats
Only for xlsx, because xls has the same structure."	"01/Jul/14 5:23 PM;wfr;Docs as far as possible added to http://www.iteraplan.de/wiki/display/upcomingIteraplan/How+to+use+Import+and+Export

More docs to come after fixes for the defects.
Still to do: create defects from the comments."	08/Jul/14 11:29 AM;wfr;Defect ticket for cases that do not lead to error message: nnn	"08/Jul/14 12:32 PM;fam;Documentation is ok and new Ticket for open issue created.
Ticket solved."																																												
