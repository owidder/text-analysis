Fix Java 8 problems in _our_ code	"Fix all issues in iteraplan source code that prevent using Java 8.



Note that these issues can be found only after upgrading Spring and most of the other libraries.



Fixing deprecated or missing calls to libraries is _not_ part of this ticket, but part of the ""upgrade lib"" ticket itself.



The issues in our own code are expected to be sparse. The main work is in the library upgrade, not in this ticket. The estimate of 1 PD is pessimistic"		Improvement	iteraplan PO	02/Jul/15 10:24 AM	06/Aug/15 1:40 PM														"24/Jul/15 4:46 PM;gph;Loading of Spring's Application Context still fails with version 4.x and Java 8:

{code}

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'massUpdateService' defined in ServletContext resource [/WEB-INF/applicationContext-ext.xml]: Cannot create inner bean 'de.iteratec.iteraplan.businesslogic.service.MassUpdateServiceImpl#51d3bdd4' of type [de.iteratec.iteraplan.businesslogic.service.MassUpdateServiceImpl] while setting bean property 'target';



...



Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'timeseriesService': org.springframework.beans.factory.FactoryBeanNotInitializedException: Cannot determine target class for proxy

{code}



The stacktrace shows a cyclic dependency when loading beans:

- massUpdateService

- loads: businessMappingService

- loads: _timeseriesService_ (1st attempt)

- loads: bbServiceLocator

- loads: technicalComponentService

- loads: _timeseriesService_ (2nd attempt: not initialized!)



The complete bean loading order of Spring's bean factory is identical in Java 7 and Java 8 until the point, where the bean 'massUpdateService' is loaded when using Java 8. With Java 7, another bean is loaded at that position.



Further debugging showed, that the resource loading order for the application context files (/WEB-INF/applicationContext*.xml) is different in both Java versions. With Java 8, the file ""applicationContext-ext.xml"" is loaded first. The first bean in this file is 'massUpdateService'. When this order is set equal to the order like in Java7, then the application context loads and the application starts without errors.



The order of the loaded resources derives from Tomcat's classes (used by Spring), which return a (subclass of) HashSet. The implementation for Hash-classes seems to have changed from Java 7 to Java 8. But because a HashSet doesn't give any guarantee about its elements' order, it is recommended to make the order of the ""applicationContext*.xml"" files deterministic anyway. This can be achieved by listing the file resources explicitly in the ""correct"" order which has been returned when using Java 7.



Removing the circular dependencies in the Spring configuration is too expensive at the moment. Therefore the quick fix should be applied.

"	"28/Jul/15 2:20 PM;gph;The UnitTest ""VBStyleCollectionTest.testVBStyleCollectionRemove()"" fails with Java 8, because the class under test ""VBStyleCollection"" extends ArrayList and implements the method ""sort(Comparator)"". A method with the same signature has been introduced in the Java 8 API to the List interface. Our implementation calls the utility method ""Collections.sort(List)"", which in Java 7 simply performs the sorting. In Java 8, it delegates back to the sort() method of List, which in this case is overwritten by out implementation. This leads to an infinite loop between the sort() methods of Collections and VBStyleCollection and finally to a StackOverflowError.



When this behavior is fixed, the test still fails, because the compareTo() implementation for hierarchical building block types in ""HierarchyHelper.compareToForOrderedHierarchy(T, T)"" violates the contract (symmetry!!) when no parent elements are assigned. The new sort algorithm in Java 8 doesn't have the same idempotent behavior like the old (""legacy merge sort"") algorithm in Java 7, which worked ""coincidentally right"" despite of the violated contract."	"28/Jul/15 2:24 PM;gph;-The Eclipse Modelling Framework (EMF) has a different in Java 8 when reading XMI files.-



The problems are in our code. Due to the modified HashSet/-Map algorithm in Java 8, the iteration order of HbMappedClass.getProperties() in EntityBeanIntrospection.eEClassFor(Class<?>) changes. This new order leads to problems in our feature initialization implementation in EntityBeanIntrospection.initEStructuralFeature(EStructuralFeature). When the ""parent"" reference is loaded before the ""children"" reference, then none of the two ends is marked as the ""transient"" end, which causes all following errors (and finally the IndexOutOfBoundsException).



Another problem:

OPPOSITE_NAMES (initialized in EntityBeanIntrospection.initOppositeNames()) doesn't contain ""baseComponents""-""parentComponents""."	30/Jul/15 4:01 PM;gph;Testcase "SvgMasterplanExportTest.testSvgMasterplan()" fails, because "DateFormatSymbols.getShortMonths()" for the month "march" changed in german locale from "Mrz" (Java <= 7) to "MÃ¤r" (Java 8).	"06/Aug/15 1:40 PM;wfr;All ""fix by document a warning"" is OK with me, for example the not-really-a-symmetrical-comparator on hierarchical building blocks.







"																																																		
