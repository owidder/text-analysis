Single element view: Add, Copy & Delete	"In the Single Element View it should be possible to:

 * add a new (blank) element

 ** icon *note add*

 ** tooltip: Add / Erstellen

 * copy the current element

 ** icon *content copy*

 ** tooltip: Copy / Kopieren

 * delete the current element

 ** icon *delete*

 ** tooltip: Delete / Löschen



Location of those buttons to be confirmed, one of:

 * top right corner of grey space

 * next to the name of element



When +adding or copying+ show a small dialog for entering the name first.

 * append '(1)' at the end of the name of the original element

 * validation - when saving - if name is available (can't be the same as existing one - check only within the same Element Type)

 ** if name already taken - red notice under text input field (as in list view while editing)

Name already taken (german: Name wird bereits verwendet)

 * Two buttons:

 ** Ok - action button

 ** Cancel/Abbrechen - default white button



When +copying+ add the option to copy relations and to copy attributes to this dialog.

 * as two separate checkboxes

 ** Copy relations (german: Beziehungen kopieren)

 ** Copy attribute values (Attributwerte kopieren)

 * should be located under the text input filed in the dialog

 * default: both checked

 * functionality:

relations copies / does not copy all relations of the element, including self relations

attributes copies / does not copy all attribute values of the element

description will always be copied



When +deleting+ - show confrimation dialog.

 * Do you really want to delete [name of element]? (Möchten Sie [name of element] löschen?)

 * Yes - action button

 ** after deleting element, view list

 * No - default weiß"		New Feature	iteraplan Thunderduck	26/Mar/17 5:59 PM	12/Jun/17 2:43 PM														"11/May/17 1:21 PM;scz;When copying an element we should not copy relations that would alter the original element such as Sub Informationssystems and Specialisations (1:n relations)



The copy otherwise would steal the originals child."	"17/May/17 4:49 PM;scz;Special Cases for Relation Copy:



 



Case Interface:

 * Keep IS, IS and BO

 * Create InfoFlow(s)



 



Case InformationSystem:

 * Keep second IS and BO

 * Create Interface and InfoFlow new



 



Case BusinessObject:

 * Keep Everything except BO

 * Create Infoflow with new BO"	"18/May/17 8:41 AM;aan;When copying Information Systems the corresponding interfaces should also be copied.



Please add the documentation of thie feature to the SEV-Doku page: [https://doc.iteraplan.de/display/iteraplan60/Single+View+Edit]



Please do not forget the fact that Interfaces are copied and children and specialisations are not copied, because they would be taken from the other original element."	"31/May/17 9:46 AM;roia;[~scz], after delete from single element page the location change (back to list) does not work correctly.



There's a code in singleBBView-controller.js:



{{$scope.setLocation = function(location) \{}}

 \{\{ //$location.path(location);}}

 \{\{ window.location.assign(location);}}

 {{};}}



why don't you use the angular $location service?



Another note: I'd suggest that you don't pass the callback functions to async requests, but return promise and use .then where it is called from. E.g. instead of

{code:java}

            $scope.updateBusinessMappings = function (type, id, modelFailCallBack) {

                console.info(""updateBusinessMappings"");

                editService.deleteElement(type, id).then(

                    function () {

                        return true;

                    },

                    function () {

                        if (angular.isFunction(modelFailCallBack)) {

                            modelFailCallBack();

                        }

                        return false;

                    }

                );

            };

....

that.scope.updateBusinessMappings(item.type, item.id, that.getFailureCallBack(callback));

{code}

 use

{code:java}

            $scope.updateBusinessMappings = function (type, id, modelFailCallBack) {

                return editService.deleteElement(type, id)

            };

....

that.scope.updateBusinessMappings(item.type, item.id).then(null, that.getFailureCallBack(callback));

{code}

 it's much less code doing the same job"	01/Jun/17 11:12 AM;scz;[~roia], thank you for these tips. I now use the Angular location service.	"01/Jun/17 12:36 PM;roia;Great. I'd also suggest to use chaining and write

{code}

$location.search("""").path(location);

{code}

instead of

{code}

$location.path(location);

 $location.search("""");

{code}"	"12/Jun/17 1:16 PM;scz;State of the ticket:



SingleElementView

 * Buttongroup anlegen

 * Icons

 * Tooltips

 * Clickevents



 



New

 * Dialog für Name

 * Alter Name als Vorschlag mit (1,2,…) 

 * Name als Duplikat prüfen und anzeigen

 * Apply und Cancel Button

 * Neues Element anlegen



 



Delete

 * Confirmation Dialog

 * Delete

 * Redirect zu List/elementType



 



Copy

 * Like New

 * Option um Relationen zu Kopieren

 * Option um Attribute zu Kopieren

 * Copy wie New

 * Copy Attributes

 * Copy Relations

 * Ausnahme für Relation Diebe (Children werden nicht kopiert)

 * createElement extended by parameter for standalone elements

 * Assigned BusinessObjects



 



Localize

 * Button

 * Tooltips

 * Dialog Neu/Copy

 * Dialog Delete

 * DE

 * EN



 



#Wieder Auskommentiert oder nicht Abgeschlossen:

 * InfoFlow über ID aus Model holen

 * Fall InformationSystem



 * Mehrere InfoFlows mit gleichem Interface und unterschiedlichen BO

 * Details about Interfaces (Dir, BO, TC)



 * Sub Information Systems ignorieren

 * Business Mappings

 * Running on Infrastructure Elements



 * Fall BusinessObject

 * Fall InformationFlow

 * Ausnahme für BusinessModels

 * Multi Data API



 



 "	"12/Jun/17 1:45 PM;roia;[~scz], there's lots of commented code in editService.js committed to repository. If it is not needed, please remove it.



Also please check the ESLint errors/warnings before putting the code for review. 



[~msr], are there some definitions of done for German team, like these [https://iteraweb.iteratec.de/confluence/pages/viewpage.action?pageId=71598916] ?



The code in singleElement-component.js 

{code:java}

for (var attribute in that.element.propertyValues) {

    propertiesForCreate[attribute] = angular.copy(that.element.propertyValues[attribute].value);

}

{code}

{{ }}

[~scz], why do you copy the propertyValues one-by-one, but not the whole object, e.g.

{code:java}

propertiesForCreate = angular.copy(that.element.propertyValues){code}

 "	"21/Jun/17 8:23 AM;scz;Hello [~roia], thank you for your advice!



I removed the commented code, I just wanted it checked-in, in case I'm going to need it later. 



For copying the properties I use one-by-one to get rid of "".value"" in each attribute."																																														
