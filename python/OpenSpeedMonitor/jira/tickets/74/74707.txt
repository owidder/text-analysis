Unit Tests werfen NullPointerExceptions	Die Tests laufen durch, dennoch fliegen 26 ungewollte(?) NullPointerExceptions		Bug	OpenSpeedMonitor	25/Feb/16 9:41 AM	04/Mar/16 6:25 PM														25/Feb/16 11:02 AM;bwo;Ich habe mir die Exceptions angesehen. Die EventResults haben einen OsmConfigCacheService, der scheinbar nicht (mehr?) gesetzt wird in den Tests. Die Methode wo dieser dann gebraucht wird fängt einfach alle Exceptions und produziert einen Log-Eintrag. Meiner Meinung nach sind hier zwei Sachen unschön: So wie ich es kenne sollte eine Domainklasse keine Services referenzieren. Der andere Punkt ist der, dass die eine Methode einfach alle Exceptions fängt, gibt es da einen speziellen Grund oder können wir das vielleicht konkretisieren? Ich kann die Excpetions erst mal fixen, aber vielleicht sollten wir noch mal über die beiden Punkte nachdenken	"25/Feb/16 11:08 AM;bka;Wenn ich das richtig lese, ergeben sich daraus 2 Probleme:

# Eine Domänenklasse benutzt einen Service

# Ein Mock fängt Exceptions und gibt sie doof aus



Meine Pennys:

# Eine Domänenklasse sollte keine Logik außer ihrer Validierungslogik beinhalten. Wenn sie aber einen Service für ihre Validierungslogik braucht, dann geht es kaum anders. Ansonsten sollte die Logik in einen Service ausgegliedert werden, ja. Evtl. ja sogar ein Service, der auf die Domänenklasse schließen lässt, bspw. 'User' -> 'UserService'

# Ich denke, es ist in Ordnung wenn der Mock Exceptions fängt, aber dann soll er die für sich beinhalten und keine Verwirrung damit stiften. Ein Kommentar in der entsprechenden Mock-Funktion sollte darauf hinweisen, bspw. ""catchs every Exception, which is not needed for further processing, so ignore it!"""	"25/Feb/16 11:23 AM;bwo;Das ist ein Missverständnis, es ist nicht der Mock der alle Exceptions fängt, es ist der Code aus einem Service der alles fängt und einen Log-Eintrag produziert:

{code}

void informDependentCsiAggregations(EventResult result){

		try{

			if (result.isCsiRelevant()) {

				csiAggregationUpdateService.createOrUpdateDependentMvs(result)

			}

		}catch(Exception e){

			log.error(""An error occurred while creating EventResult-dependent CsiAggregations for result: ${result}"", e)

		}

	}

{code}

Die Methode isCsiRelevant nutzt den OsmConfigCacheService. So wie ich das sehe, könnte man diese Methode problemlos in einen Service auslagern.

Ich sehe gerade, dass der EventResultService diese Methode sogar bereits besitzt, sie ist jedoch Deprecated und es sollte die Methode aus dem EventResult genutzt werden. Mir ist nicht ganz klar, wieso diese Entscheidung getroffen wurde :/



"	25/Feb/16 11:27 AM;bka;Ich schätze, diese Entscheidung wurde getroffen, weil 'isCsiRelevant()' aus einem Interface kommt. Das Interface wird in den EventResults und den CsiAggregations verwendet.	25/Feb/16 11:31 AM;bwo;Das kann natürlich sein, aber eine richtige Begründung wäre es doch auch nicht oder? Überall wo die Methode genutzt wird, könnte auch ein Service mit der Methode genutzt werden und das Interface angepasst werden.	"25/Feb/16 11:39 AM;bka;ich denke, es ist angenehmer zu schreiben:

{code} ding.isCsiRelevant(){code}

... als ...

{code} service.isCsiRelevant(ding){code}



Wie wäre es denn mitfolgender Alternative (bitte als Pseudocode lesen) :

{code}

Service {

  function isCsiRelevant(ding) {

    return true;

  }

}



DomainObject {

  Service service = service

  function isCsiRelevant() {

    return service.isCsiRelevant(this);

  }

}

{code}



Dann ließe sich der Code immernoch 'leserlich und schön' schreiben, und die Logik wäre woanders. ?"	"25/Feb/16 11:42 AM;bwo;Also ich will hier jetzt auch kein riesen Fass auf machen deswegen. Aktuell macht uns das ja auch keine Probleme, aber vom Design wäre es halt ""schöner"" kein Service in einer Domain zu haben. Ich weiß nicht wie Grails mit der Injection eine Domain umgeht, aber ich behaupte mal dass so wie es aktuell ist führt es dazu, dass in jedes Objekt jedes mal der Service injected werden muss und davon laden wir ja gerne mal ein paar auf einmal. Es geht dabei zwar nur um Referenzen, aber bei der Menge wird auch dass irgendwann unschön. 

Möglicherweise passiert hier aber auch Metaklassen Magie, weiß da jemand mehr?"	"29/Feb/16 11:16 AM;nku;Bitte die Methode isCsiRelevant() wieder in den EventResultService verlegen.

Wenn es keine guten Gründe gibt sollten wir keine Services in Domains injtecen.

"	29/Feb/16 11:18 AM;nku;In entsprechendem Test ist hinterher ggf. der EventResultService zu mocken. 																																														
