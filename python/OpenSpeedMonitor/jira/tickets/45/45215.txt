Refactoring of the iteraQl Loader	The iteraQl loader is to be refactored, so that the high-level concurrency features of Java, or possibly the Quartz package, are used to improve stability (i.e. separation of scheduling logic and content). A loading strategy to consider is one of scheduled updates, e.g. every two hours.		Improvement	iteraplan PO	21/Oct/11 6:18 PM	05/Dec/11 2:19 PM					iteraQl	reports								"24/Oct/11 12:05 PM;agu;Please fix also the following issues:
1. IteraQlServiceImpl - initialize the iteraQlEnabled variable in a static method and declare this variable as final
2. IteraplanInstanceProvider - instead of
{code}
new HibernateTemplate(..)
{code}
use 
{code}
getHibernateTemplate()
{code}
method.
3. IteraplanInstanceProvider - instead of callback use
{code}
getHibernateTemplate().loadAll(clazz);
{code}

"	24/Oct/11 2:55 PM;kgo;Since it makes no sense to control the iteraQl timeout before loading during the build process, the corresponding property should be statically set in the properties template.	"28/Oct/11 12:01 PM;sry;I just experienced this exception when opening the nesting cluster diagram page:
{code}
[WARN ] [2011-10-28 11:47:09] (directwebremoting.impl.DefaultRemoter) Method execution failed:
java.lang.IllegalThreadStateException
        at java.lang.Thread.start(Thread.java:638)
        at de.iteratec.iteraql.IteraQlManagerImpl.reInitialize(IteraQlManagerImpl.java:209)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
        at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:113)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
        at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:113)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
        at $Proxy220.reInitialize(Unknown Source)
        at de.iteratec.iteraplan.businesslogic.service.IteraQlServiceImpl.doReInit(IteraQlServiceImpl.java:92)
        at de.iteratec.iteraplan.businesslogic.service.IteraQlServiceImpl.initOrReloadIteraQl(IteraQlServiceImpl.java:83)
{code}"	28/Oct/11 5:21 PM;kgo;With which version have you experienced the exception? The current trunk version should not be able to call the initOrReload method from a nesting cluster diagram. What exactly was the exception? Start when already running, or start when interrupted (i.e. some error has occurred during load)?	04/Nov/11 12:22 PM;kgo;Main implementation should now be considered complete. Further work in this issue will be focused on the development of JUnit test cases.	24/Nov/11 4:58 PM;sry;This is also integrated in release 2.9.1 (changesets up to now).	05/Dec/11 2:19 PM;sfe;looks fine																																																
