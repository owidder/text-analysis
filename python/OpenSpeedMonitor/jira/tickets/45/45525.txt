History: Implement tracking of changes to Enum and Responsibility values	"We have not yet managed to teach Envers that it should track changes on enum and responsibility attributes, i.e. changes are not even recorded in the database.

This is presumably the last bit of missing info for a complete history of building blocks."		Improvement	iteraplan PO	04/May/12 1:19 PM	17/Sep/13 10:07 AM					hibernate	history								17/Sep/12 8:22 PM;sry;will be implemented complete differently in version 4, no longer applicable	07/Jun/13 1:05 PM;sbu;As we are working on the 3.x version this bug is still open.	"08/Aug/13 3:49 PM;bra;analysis of this issue pointed out the following:

# in contrast to number, text etc. AVs which are stored as set within the AT, enum and responsibility AVs are stored as List (for enum this sounds reasonable, as our enumerations are ordinal, however for responsibility this might not even be neccessary)
# hibernate can only store lists (including the order) if the many side of the relationship owns the relationship. Therefore we cannot make the AT to AV relationship ""inverse"" as with the other ATs
# because we cannot make the relationship ""inverse"", hibernate requires us to make the non-owning side (from AV to AT) non-insertable and non-updatable.
# because of the non-updatability and non-insertability, envers fails to insert the foreign-key of the corresponding AT into the AV_HIST table
# after retrieval of any revision from envers, the AT of the AV is null. In that case, the AttributesDiffer#findAVByATIdInAVAs skips the AV

possible solutions:
# use set instead of list for the AVs of all ATs and manage list order for EnumAVs manually within our DAOs or services. Additionally, check if we really need to have an order on responsibility AVs
# another point might be to enable the AttributesDiffer to cope with null ATs. However, this needs further investigation"	"22/Aug/13 12:01 PM;sfe;A variant of the first possible solution mentioned by Bernhard Radke is as follows:
# Change the collection for responsibility attribute values in RespAT to Set. We don't need an ordering here and, in fact, don't use it anyway
# Add explicit position field to EnumAV and change its compareTo method to use the position value
# Add Set-based interface for enumeration attribute values in EnumAT for hibernate to use:
#* Add setter and getter taking and returning the attribute values as Set, but keep the internal representation of the values as List
#** Setter writes the given values of the Set into the internal list and sorts the list
#** Getter iterates over the list and sets the EnumAVs position values accordingly, then returns a new Set with the list's content
#* Change hibernate mappings for EnumAT to use these Set-based setter and getter and map the collection as Set accordingly

=>
For iteraplan, enum attribute values still are in a sortable list: nothing changes
For hibernate, enum attribute values are held in a Set, which makes the history work, and their ordering, represented in the position column, is just another property of the EnumAV entity"	"05/Sep/13 10:12 AM;sfe;Implemented another variant:
* attribute values are held in sets inside the attribute type entities
* enum attribute values have a ""position"" field to explicitely express ordering
* attribute values will be ordered ""on demand"" according to ther position field (enums) or name (responsibility)"	19/Sep/13 3:38 PM;psc;Reviewed with Stephan. Solution accepted. Ticket will be closed.																																																	
