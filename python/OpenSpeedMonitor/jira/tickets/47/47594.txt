Configuration for border line types of content elements	Add the configuration for border line types of content elements		New Feature	iteraplan PO	09/Apr/15 4:54 PM	22/Apr/15 3:47 PM					configuration									"09/Apr/15 4:54 PM;msr;
*Summary:*
Implement different border line types for inner elements, which depend on a enumeration or numeric attribute (analogue mechanism to coloring).

*As-Is:*
There exists only one solid border line for inner elements.

*To-Be:*
Border lines can be specifically selected by enumeration or numeric attribute.

*Affected parts of the system:*
* Landscape Diagram inner boxes
* Legend
* Url
* Context menu

*Approach:* 
Analogue to the coloring mechanism implement a mechanism for border line types (solid, dotted, ...) of inner boxes.
The new context menu is named ""Line type by enumeration property"" and ""Line type by numeric property"".
Adapt the legend and url accordingly.

*Acceptance Criteria:*
The user has the same options as in the coloring of inner elements, i.e. analogue context menu actions, analogue legend, analogue url, ..."	17/Apr/15 11:12 AM;alvo;All commits have been provided under IPNINE-458	"21/Apr/15 5:35 PM;tam;lsdItemDecorator.js

1.
If signatures were changed or new, are the jsdocs still up-to-date?
{code}
	var applyColoringFunction
	var collectColoringValuesFunction
	var collectBorderLineValuesFunction;
	var applyBorderLineFunction
{code}

2. this.configureColoring
why sometimes empty function, sometimes null. Is it kind of reset? If yes, why do we need this? maybe comment this?
{code}
	applyColoringFunction = function(){};
	collectColoringValuesFunction = null;
	applyBorderLineFunction = function(){};
{code}

3. var configureEnumerationBorderLines = function(literals){
is literals good name?
maybe comment / jsdoc it? 
is it possible, that {code}instance.borderLines[ix]){code} will be out of bounds?

4. {code}var configureNumericColoring = function(currentColoringScheme) {{code}
maybe adjust jsdoc, it's look like partly not up-to-date or copy-pasted
what does happen in applyBorderLineFunction? Why do we need normalization? I miss some comments, but maybe only I :)

5. getBorderLines - very optional.
what happened if the number of elements is large? the width will be bigger? is it neccecary?
would be it enough to have only one profile with solide line?
why constant 4 and nothing else?

6. {code}var configureNumericBorderLines = function(){{code}
applyBorderLineFunction
the same here. what does happen in applyBorderLineFunction? Why do we need normalization? I miss some comments, but maybe only I :)

lsdConfiguration.js
1.
{code}configurationParameters.borderLineProperty = null;//""Maintenance activity"";{code}
what is //""Maintenance activity"";"	"14/May/15 4:11 PM;anma;1. Reviewed jsdoc for this
2. I think it doesn't matter. Just some kind of initialize. This functions like a rule for item customization
3. Everything is ok. This function works with literals from types definition
instance.borderLines[ix] it's the most usefull way to work with object methods which name is located in variable.
4. We need normalization for getting line type between two line types(max and min).
5. All items divided into 5 groups by param value. And we have only 5 styles for border lyne type by numeric property.

applyColoringFunction and applyBorderLineFunction are functions which contain rules for item customization. If function is empty or null item coloring/border line type is default

what is //""Maintenance activity""; - it was just some hard code for development needs. Has been deleted"																																																			
