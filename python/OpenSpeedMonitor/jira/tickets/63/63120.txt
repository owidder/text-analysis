Metamodel carveout	"Carve out the metamodel functionality out of the data model class.



To-be



in class Datamodel

add method getMetamodel



Note: use Elastic terms, slightly simplified.



class Metamodel 

method getTypes: array of Type

method getTypeByPersistentName( String ): Type or null



create: take JSON, over all top level elements, create Type or Enumeration, resp.



Note: no direct access from Metamodel to Enumeration

Note: no access to attribute groups, aka. mixin types



class Type

name: String

getProperties: array of Property

getPropertyByPersistentName( String ): Property or null

getRelationshipEnds: array of RelationshipEnd

getRelationshipEndByPersistentName( persistentName ) : RelationshipEnd or null



Note: no access to a conceptual supertype Feature, only to concrete Property or RelationshipEnd



create: take JSON for one type, iterate over all features and create a Property or a Relationship End, resp.



class Property

PersistentName: String

required, multiple: boolean

valueType: ValueType



class RelationshipEnd

PersistentName: String

required, multiple: boolean

type: Type



class ValueType

PersistentName: String

asEnumeration: Enumeration or null



class Enumeration

PersistentName: String (inherited from ValueType

literals: array of String, persistent names (open: or Literal objects)





Open:

* do we need getters, or can we use fields and treat them as immutable? [~wfr]: immutable state and fields are simpler

* do we need a class for literal: do we need the default color of a literal? If so, class

* do we need upward navigation, that is from property or relationship to type? 

* do we need 2 classes for ValueType and Enumeration, or can we use one JS class for both concepts?

* do we need the positions of the literal within an enumeration? Probably not, ordering is implicit in the array

* do we need the opposite relationship end for a given one? How do we find the right one, for example parent/child? ."		Improvement	iteraplan PO	11/Nov/15 10:24 AM	14/Dec/15 4:15 PM														"13/Nov/15 10:55 AM;wfr;prelim notes on existing code



...js/common/commons.js - module commons

factory dataModel 

quote

    .factory('dataModel', ['objectsListProcessor', '$filter', function (objectsListProcessor, $filter) {

        return function (apiData, metaModel, injections) {

            return new DataModel(apiData, metaModel, objectsListProcessor, $filter, injections);

        }

    }])



means 



for the service dataModel 

register a factory function 

using 2 injected services objectListProcessor (defined above) and $filter

building a function

with 3 parameters apiData, metaModel, injections

that returns a new DataModel instance

with all the 5 parameters above





"	"13/Nov/15 11:13 AM;wfr;js/common/dataModel.js class DataModel param metamodel read access 8 times 

getBusinessObjectTypesDefinition

getEnumerationTypesDefinition

getFeaturesListByPersistentName

getMetaDataByName

getMetaTypeDefinition

getPredefinedValuesEnumPropbyType

isBusinessObject

isFeatureEnum



as an intermediate refactoring step, these methods can be implemented in an access to the new MetaModel structure

and all uses of the metamodel parameter can be eliminated.



 "	"24/Nov/15 11:26 AM;wfr;The following points are out of scope of this ticket, originally. They will be addressed in the subsequent tickets:



* remove all the 8 methods in datamodel that use the raw metamodel JSON. see comment above.

* add utitlity functions as required (eg. filltered types and properties, multi-part paths, literal sorting, ...)

"	"24/Nov/15 11:27 AM;wfr;core implementation done



utilities as required during refactoring of caller code."	24/Nov/15 4:13 PM;fro;move switch in property.js to the objects in valuetype.js	26/Nov/15 4:35 PM;wfr;minor merge	"27/Nov/15 1:15 PM;wfr;Comments from review



- position, id are not used as regular properties. There should be list of regular properties only.



- JSDoc return type should be non/nullable 



- this.metamodel:  move up in datamodel constructor



- MetaModel or Metamodel? consistent!, avoid JSDoc warnings







 "	"09/Dec/15 1:51 PM;wfr;dataModel.js: moved field up to top



MetaModel as a class name is already consistent.

Warnings in WebStorm are from spell checking









"	"14/Dec/15 1:39 PM;wfr;done minor touches from review



created new improvement ticket for ""regular vs. technical attributes""

ITERAPLAN-4252"																																														
