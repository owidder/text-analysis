Model changes client - server	"*Handle model changes on a client*

* _synchronize within the client to other views_ - Update client model and redraw current view if necessary

* _collect into batch updates_ - Collect all changes within a to-be-defined time interval into one batch. Commit after some to-be-defined time or when there is an explicit commit. Preprocess the changes by compounding several changes of one feature into one change.

* _transmit to server_ - Use json format based on the json output of /api/data, only adding the necessary info for the changes

* _handle on server_ - mass data elastic import from json format, feature masking per object expression

* _handle feedback from server to client_ - response contains info which OEs were changed successfully and which were not. Display on client as info/warning icon with navigation to the conflict OEs. Also contains the current data of the conflict OEs from the server. Possibly highlighting of conflict OEs in list view?



*Update clients with changes.*

* On edit begin and when writing lead to conflict, update the according OEs in client.

* Polling to server with a response containing an overview of changes: ""x IS, y BP changed."", if there were changes offer a ""reload"" button/link which reloads the complete data model."		Epic	iteraplan Thunderduck	21/Jan/16 1:45 PM																																																																					
